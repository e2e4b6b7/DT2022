\import Function.Meta
\import Meta
\import Paths.Meta
\import Utils (Maybe, just, maybe, nothing)
\import hw04
\import lect05 (funExt')
\import lect06 (fmap)
\import lect07 (Decide, no, yes)
\import lect09

-- 1. Закончите определение \instance Monad для Term.

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | return-left a k => idp
  | return-right {B : \Set} (m : Term B) : m >>= return = m \elim m {
    | app m1 m2 => rewrite (return-right m1) $ rewrite (return-right m2) idp
    | lam m => rewrite liftM-return $ pmap lam $ return-right m
    | var v => idp
    | unit => idp
  }
  | >>=-assoc {A B C : \Set} (m : Term A) (k : A -> Term B) (l : B -> Term C) : (m >>= k) >>= l = m >>= (\lam x => k x >>= l) \elim m {
    | app m1 m2 => pmap2 app (>>=-assoc _ _ _) (>>=-assoc _ _ _)
    | lam m =>
      pmap lam $
      later $
      rewrite (>>=-assoc m (liftM k) (liftM l)) $
      pmap (m >>= __) $
      funExt' (\lam a => unfold liftM $ cases a \with {
        | just a => rewrite (tmp (k a) just _) $ tmp2 _ _
        | nothing => idp
      })
    | var v => idp
    | unit => idp
  }
  \where {
    \func liftM-return {A : \Set} : liftM {A} {A} return = return =>
      unfold liftM $ funExt' (\lam a => cases a idp)

    \func tmp {A B C : \Set} (a : Term A) (f : A -> B) (k : B -> Term C) : termMap f a >>= k = a >>= (\lam a => k (f a)) \elim a
      | app a1 a2 => pmap2 app (tmp _ _ _) (tmp _ _ _)
      | lam a =>
        pmap lam $
        later $
        rewrite (tmp a (fmap f) (liftM k)) $
        pmap (a >>=) $
        funExt' $ (\lam a => unfold liftM $ cases a idp)
      | var v => idp
      | unit => idp

    \func tmp2 {B C : \Set} (tb : Term B) (l : B -> Term C) : tb >>= (\lam a => termMap just (l a)) = termMap just (tb >>= l) \elim tb
      | app tb1 tb2 => pmap2 app (tmp2 _ _) (tmp2 _ _)
      | lam tb => pmap lam {?}
      | var v => idp
      | unit => idp
  }

-- 2. Определите отношение многошаговой редукции на Term.

\data TransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | closure-base (R x y)
  | closure-trans (z : A) (r1 : R x z) (r2 : TransClosure R z y)

\func Red {V : \Set} (t s : Term V) : \Type => TransClosure Red1 t s

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | app t1 t2 => \case (strategy t1), (strategy t2) \with {
    | yes (a, b), _ => yes (app a t2, appLeft b idp)
    | no _, yes (a, b) => yes (app t1 a, appRight idp b)
    | no r1, no r2 => cases t1 \with {
      | lam t3 => yes {?} -- (t3 >>= maybe t2 var, redBeta idp idp)
      | app t3 t4 => no {?}
      | var v => no {?}
      | unit => no {?}
    }
  }
  | lam t => \case (strategy t) \with {
    | yes (a, b) => yes (lam a, redLam b)
    | no f => no (\lam p => \case \elim p \with {
      | (s,r) => \case \elim s, \elim r \with {
        | lam s, redLam r => f (s, r)
      }
    }
    )
  }
  | var v => no (\lam (_, r) => \case r)
  | unit => no (\lam (_, r) => \case r)

-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc _x => acc (\lam a' rta => _x a' {?})

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc _x => acc (\lam a' rsa => _x a' {?})

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc _x => acc (\lam a' rta => {?})

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B \elim b, B, h
  | unit, Unit, unitType => unitType
  | var v, B, varType p => {?}
  | app b b1, B, appType h1 h2 => {?}
  | lam b, Arr B B1, lamType h => {?}

\func substLem1 => {?}

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim a, a', r, A, h
  | unit, _, closure-base r, Unit, unitType => \case r
  | unit, _, closure-trans z r1 r2, Unit, unitType => \case r1
  | var v, _, closure-base r, A, varType p => \case r
  | var v, _, closure-trans z r1 r2, A, varType p => \case r1
  | app a a1, a', r, A, h => {?}
  | lam a, a', r, A, h => {?}

-- Optional
-- 7. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\data HeadRed {V : \Set} (a t s : Term V) \elim t, s
  | app t1 t2, app s1 s2 => headApp (HeadRed a t1 s1) (t2 = s2)
  | app t a', s => headBeta {f : Term (Maybe V)} (a = a') (lam f = t) (f >>= maybe a var = s)

\func redInterp {V : \Set} {a t s : Term V} {T : Type} (r : HeadRed a t s) (acc : Acc Red1 a) (q : Interp T s) : Interp T t \elim t, s, r, acc, q
  | app t t1, app s s1, headApp r p, acc _x, q => {?}
  | app t t1, s, headBeta p p1 p2, acc _x, q => {?}

-- 8. Докажите typeableInterp из лекции