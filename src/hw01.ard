-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ x _ : Nat) => x
\func apply (f : Nat -> Nat) (x : Nat) => x
\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 8 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 9 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (c b1 b2 : Bool) : Bool \elim c
  | false => b1
  | true => b2

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * x ^ y

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x' \as x => x * fac x'

-- 7. Определите mod и gcd.

\func mod (x y : Nat) : Nat
  | _, 0 => 0
  | x, y => mod' x x y
    \where {
      \func mod' (s x y : Nat) : Nat \elim s
        | 0 => 0
        | suc s => \case (x < y) \with {
          | true => x
          | false => mod' s (x - y) y
        }
    }

\func gcd (x y : Nat) => gcd' (x + y) x y
    \where {
      \func gcd' (s x y : Nat) : Nat \elim s
        | 0 => 0
        | suc s => \case x, y \with {
          | 0, m => m
          | m, 0 => m
          | x, y => \case (x < y) \with {
            | true => gcd' s x (Nat.mod y x)
            | false => gcd' s (Nat.mod x y) y
          }
        }
    }

\func modTest1 : mod 0 3 = 0 => idp
\func modTest2 : mod 100 3 = 1 => idp
\func modTest3 : mod 101 3 = 2 => idp

\func gcdTest1 : gcd 6 3 = 3 => idp
\func gcdTest2 : gcd 11 3 = 1 => idp
\func gcdTest3 : gcd 8 12 = 4 => idp
