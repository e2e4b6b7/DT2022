\import Function.Meta
\import Paths.Meta
\import Utils
\open Nat(+,*)
\import lect03

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func proof : fileTest = (17,8,13,55,18,21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func proof1 : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | :: a xs => pmap (a `::` __) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

\func ++-zero {A : \Type} {xs : List A} : xs ++ nil = xs \elim xs
  | nil => idp
  | :: a xs => pmap (a :: __) ++-zero

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => sym ++-zero
  | :: a xs => rewriteI (++-assoc (reverse ys) (reverse xs) (a :: nil)) $ pmap (__ ++ a :: nil) $ reverse++ xs ys

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | :: a xs => rewrite (reverse++ (reverse xs) (a :: nil)) $ pmap (a :: __) $ reverse-isInvolutive xs

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func *-lsuc (n m : Nat) : suc n * m = n * m + m \elim m
  | 0 => idp
  | suc m =>
    pmap suc $
    rewrite {2} (+-assoc (n * m) n m) $
    rewrite {3} (+-comm n m) $
    rewriteI {2} (+-assoc (n * m) m n) $
    pmap (__ + n) $
    *-lsuc n m

\func *-comm (n m : Nat) : n * m = m * n \elim n, m
  | 0, 0 => idp
  | 0, suc m => *-comm 0 m
  | suc n, m => rewrite (*-lsuc n m) $ pmap (__ + m) $ *-comm n m

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n =>
    rewrite (+-assoc (m * n) m (k * n + k)) $
    rewriteI (+-assoc m (k * n) k) $
    rewrite (+-comm m (k * n)) $
    rewrite (+-assoc (k * n) m k) $
    rewriteI (+-assoc (m * n) (k * n) (m + k)) $
    pmap (__ + (m + k)) $
    rdistr n m k

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k =>
  rewrite (*-comm n (m + k)) $
  rewrite (*-comm n m) $
  rewrite (*-comm n k) $
  rdistr n m k

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func paireq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b'): (a,b) = (a',b') =>
  rewrite p $
  rewrite q $
  idp

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam (a', b') => f a b = f a' b') (paireq p q) idp

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport _ p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b
